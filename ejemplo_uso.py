#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Ejemplo de uso del Decodificador Gr√°fico de Mensajes - Huffman

Este script demuestra las funcionalidades principales del programa
sin necesidad de usar la interfaz gr√°fica.
"""

import os
import sys

# Importaciones de m√≥dulos propios
from huffman_codificador import (
    calcular_frecuencias, 
    construir_arbol, 
    generar_codigos, 
    codificar_mensaje,
    analizar_compresion,
    obtener_estadisticas_codificacion
)
from huffman_decodificador import (
    decodificar_archivo,
    validar_archivo,
    analizar_archivo,
    mostrar_analisis_archivo
)

def ejemplo_basico():
    """Ejemplo b√°sico de codificaci√≥n y decodificaci√≥n."""
    print("=" * 60)
    print("EJEMPLO B√ÅSICO DE CODIFICACI√ìN Y DECODIFICACI√ìN")
    print("=" * 60)
    
    # Mensaje de ejemplo
    mensaje = "HOLA MUNDO"
    print(f"Mensaje original: '{mensaje}'")
    print(f"Longitud: {len(mensaje)} caracteres")
    
    # Calcular frecuencias
    frecuencias = calcular_frecuencias(mensaje)
    print(f"\nFrecuencias de caracteres:")
    for caracter, freq in sorted(frecuencias.items()):
        print(f"  '{caracter}': {freq}")
    
    # Construir √°rbol
    raiz = construir_arbol(frecuencias)
    print(f"\n√Årbol de Huffman construido con {len(frecuencias)} hojas")
    
    # Generar c√≥digos
    codigos = generar_codigos(raiz)
    print(f"\nC√≥digos de Huffman generados:")
    for caracter, codigo in sorted(codigos.items()):
        print(f"  '{caracter}': {codigo}")
    
    # Calcular bits originales vs comprimidos
    bits_original = len(mensaje) * 8  # ASCII
    bits_comprimido = sum(len(codigos[caracter]) for caracter in mensaje)
    
    print(f"\nAn√°lisis de compresi√≥n:")
    print(f"  Bits originales (ASCII): {bits_original}")
    print(f"  Bits comprimidos: {bits_comprimido}")
    print(f"  Compresi√≥n: {((1 - bits_comprimido/bits_original) * 100):.1f}%")
    
    return mensaje, raiz, codigos

def ejemplo_codificacion_archivo():
    """Ejemplo de codificaci√≥n y guardado en archivo."""
    print("\n" + "=" * 60)
    print("EJEMPLO DE CODIFICACI√ìN Y GUARDADO EN ARCHIVO")
    print("=" * 60)
    
    # Mensaje de ejemplo
    mensaje = "Este es un mensaje de prueba para demostrar la compresi√≥n de Huffman"
    print(f"Mensaje: '{mensaje}'")
    
    # Archivo temporal
    archivo_temp = "mensaje_ejemplo.bin"
    
    try:
        # Codificar y guardar usando el m√≥dulo de codificaci√≥n
        stats, raiz, codigos, bits = obtener_estadisticas_codificacion(mensaje, archivo_temp)
        
        print(f"\nArchivo guardado: {archivo_temp}")
        print(f"Tama√±o del archivo: {stats['tama√±o_archivo']} bytes")
        print(f"Bits codificados: {stats['bits_codificados']}")
        print(f"Compresi√≥n: {stats['compresion_porcentaje']:.1f}%")
        
        # Decodificar y verificar usando el m√≥dulo de decodificaci√≥n
        mensaje_decodificado, raiz_reconstruida, bits_leidos = decodificar_archivo(archivo_temp)
        
        print(f"\nVerificaci√≥n:")
        print(f"  Mensaje original: '{mensaje}'")
        print(f"  Mensaje decodificado: '{mensaje_decodificado}'")
        print(f"  ¬øCoinciden?: {'‚úÖ S√ç' if mensaje == mensaje_decodificado else '‚ùå NO'}")
        
        # Analizar archivo
        analisis = analizar_archivo(archivo_temp)
        print(f"\nAn√°lisis del archivo:")
        print(f"  V√°lido: {'‚úÖ S√ç' if analisis['valido'] else '‚ùå NO'}")
        print(f"  Caracteres √∫nicos: {analisis['caracteres_unicos']}")
        print(f"  Longitud del mensaje: {analisis['longitud_mensaje']}")
        
        # Limpiar archivo temporal
        os.remove(archivo_temp)
        print(f"\nArchivo temporal eliminado: {archivo_temp}")
        
    except Exception as e:
        print(f"Error: {e}")

def ejemplo_texto_largo():
    """Ejemplo con texto m√°s largo para mostrar mejor compresi√≥n."""
    print("\n" + "=" * 60)
    print("EJEMPLO CON TEXTO LARGO")
    print("=" * 60)
    
    texto_largo = """
    El algoritmo de Huffman es un algoritmo de compresi√≥n de datos que utiliza 
    c√≥digos de longitud variable para representar caracteres. Fue desarrollado 
    por David A. Huffman en 1952 mientras era estudiante en el MIT.
    
    El algoritmo funciona construyendo un √°rbol binario basado en las frecuencias 
    de aparici√≥n de cada car√°cter en el texto. Los caracteres m√°s frecuentes 
    reciben c√≥digos m√°s cortos, mientras que los menos frecuentes reciben c√≥digos 
    m√°s largos, optimizando as√≠ la compresi√≥n.
    
    Este m√©todo es ampliamente utilizado en aplicaciones como compresi√≥n de 
    archivos, transmisi√≥n de datos y codificaci√≥n de informaci√≥n.
    """
    
    # Limpiar texto (remover espacios extra)
    texto_limpio = " ".join(texto_largo.split())
    
    print(f"Texto de ejemplo ({len(texto_limpio)} caracteres):")
    print(f"'{texto_limpio[:100]}...'")
    
    # Calcular frecuencias
    frecuencias = calcular_frecuencias(texto_limpio)
    print(f"\nCaracteres √∫nicos: {len(frecuencias)}")
    
    # Mostrar los 10 caracteres m√°s frecuentes
    frecuencias_ordenadas = sorted(frecuencias.items(), key=lambda x: x[1], reverse=True)
    print(f"\nTop 10 caracteres m√°s frecuentes:")
    for i, (caracter, freq) in enumerate(frecuencias_ordenadas[:10], 1):
        porcentaje = (freq / len(texto_limpio)) * 100
        print(f"  {i:2d}. '{caracter}': {freq:3d} veces ({porcentaje:5.1f}%)")
    
    # Construir √°rbol y generar c√≥digos
    raiz = construir_arbol(frecuencias)
    codigos = generar_codigos(raiz)
    
    # Calcular compresi√≥n
    bits_original = len(texto_limpio) * 8
    bits_comprimido = sum(len(codigos[caracter]) for caracter in texto_limpio)
    
    print(f"\nAn√°lisis de compresi√≥n:")
    print(f"  Tama√±o original: {bits_original} bits ({bits_original//8} bytes)")
    print(f"  Tama√±o comprimido: {bits_comprimido} bits ({bits_comprimido//8 + 1} bytes)")
    print(f"  Compresi√≥n: {((1 - (bits_comprimido//8 + 1)/(bits_original//8)) * 100):.1f}%")
    
    # Mostrar algunos c√≥digos
    print(f"\nEjemplos de c√≥digos generados:")
    for caracter, codigo in sorted(codigos.items())[:10]:
        print(f"  '{caracter}': {codigo}")

def ejemplo_caracteres_especiales():
    """Ejemplo con caracteres especiales y acentos."""
    print("\n" + "=" * 60)
    print("EJEMPLO CON CARACTERES ESPECIALES")
    print("=" * 60)
    
    texto_especial = "¬°Hola! ¬øC√≥mo est√°s? √âste es un mensaje con acentos: √°√©√≠√≥√∫√±√º√ß"
    print(f"Texto con caracteres especiales: '{texto_especial}'")
    
    # Calcular frecuencias
    frecuencias = calcular_frecuencias(texto_especial)
    
    print(f"\nFrecuencias (incluyendo caracteres especiales):")
    for caracter, freq in sorted(frecuencias.items()):
        print(f"  '{caracter}' (ASCII: {ord(caracter):3d}): {freq}")
    
    # Construir √°rbol y generar c√≥digos
    raiz = construir_arbol(frecuencias)
    codigos = generar_codigos(raiz)
    
    print(f"\nC√≥digos generados:")
    for caracter, codigo in sorted(codigos.items()):
        print(f"  '{caracter}': {codigo}")
    
    # Verificar que la decodificaci√≥n funciona
    bits = ''.join(codigos[caracter] for caracter in texto_especial)
    print(f"\nSecuencia de bits: {bits}")
    print(f"Longitud de bits: {len(bits)}")

def ejemplo_validacion_archivos():
    """Ejemplo de validaci√≥n y an√°lisis de archivos."""
    print("\n" + "=" * 60)
    print("EJEMPLO DE VALIDACI√ìN Y AN√ÅLISIS DE ARCHIVOS")
    print("=" * 60)
    
    # Crear archivo de prueba
    mensaje = "Mensaje de prueba para validaci√≥n"
    archivo_temp = "archivo_validacion.bin"
    
    try:
        # Codificar mensaje
        codificar_mensaje(mensaje, archivo_temp)
        
        # Validar archivo
        validacion = validar_archivo(archivo_temp)
        print(f"Validaci√≥n del archivo '{archivo_temp}':")
        print(f"  V√°lido: {'‚úÖ S√ç' if validacion['valido'] else '‚ùå NO'}")
        if validacion['valido']:
            print(f"  Tama√±o: {validacion['tama√±o']} bytes")
            print(f"  Caracteres √∫nicos: {validacion['caracteres_unicos']}")
            print(f"  Bits descartados: {validacion['bits_descartados']}")
        else:
            print(f"  Error: {validacion['error']}")
        
        # Analizar archivo
        print(f"\nAn√°lisis detallado:")
        analisis = analizar_archivo(archivo_temp)
        if analisis['valido']:
            mostrar_analisis_archivo(analisis)
        else:
            print(f"  Error en an√°lisis: {analisis['error']}")
        
        # Limpiar
        os.remove(archivo_temp)
        print(f"\nArchivo temporal eliminado: {archivo_temp}")
        
    except Exception as e:
        print(f"Error: {e}")

def mostrar_estadisticas():
    """Muestra estad√≠sticas generales del algoritmo."""
    print("\n" + "=" * 60)
    print("ESTAD√çSTICAS Y CARACTER√çSTICAS DEL ALGORITMO")
    print("=" * 60)
    
    print("""
    üéØ CARACTER√çSTICAS DEL ALGORITMO DE HUFFMAN:
    
    ‚úÖ Ventajas:
       ‚Ä¢ Compresi√≥n sin p√©rdida de informaci√≥n
       ‚Ä¢ √ìptimo para c√≥digos de longitud variable
       ‚Ä¢ Eficiente para textos con frecuencias variables
       ‚Ä¢ Algoritmo determin√≠stico y reproducible
    
    üìä Eficiencia:
       ‚Ä¢ Mejor compresi√≥n en textos con frecuencias desiguales
       ‚Ä¢ Menos eficiente en textos con frecuencias uniformes
       ‚Ä¢ Overhead m√≠nimo para archivos peque√±os
    
    üîß Implementaci√≥n:
       ‚Ä¢ Uso de heap (mont√≠culo) para construcci√≥n eficiente
       ‚Ä¢ Estructura de √°rbol binario
       ‚Ä¢ Codificaci√≥n recursiva de c√≥digos
       ‚Ä¢ Manejo de bits de relleno
    
    üìÅ Formato de archivo:
       ‚Ä¢ Header con metadatos (frecuencias)
       ‚Ä¢ Datos comprimidos en formato binario
       ‚Ä¢ Informaci√≥n de bits de relleno
       ‚Ä¢ Compatible con cualquier tipo de texto
    
    üèóÔ∏è Arquitectura Modular:
       ‚Ä¢ huffman_codificador.py: Funciones de codificaci√≥n
       ‚Ä¢ huffman_decodificador.py: Funciones de decodificaci√≥n
       ‚Ä¢ main.py: Interfaz gr√°fica y coordinaci√≥n
       ‚Ä¢ ejemplo_uso.py: Ejemplos y demostraciones
    """)

def main():
    """Funci√≥n principal que ejecuta todos los ejemplos."""
    print("üå≥ DECODIFICADOR GR√ÅFICO DE MENSAJES - HUFFMAN")
    print("Ejemplos de uso y demostraci√≥n")
    print("=" * 60)
    
    try:
        # Ejecutar ejemplos
        ejemplo_basico()
        ejemplo_codificacion_archivo()
        ejemplo_texto_largo()
        ejemplo_caracteres_especiales()
        ejemplo_validacion_archivos()
        mostrar_estadisticas()
        
        print("\n" + "=" * 60)
        print("‚úÖ TODOS LOS EJEMPLOS COMPLETADOS EXITOSAMENTE")
        print("=" * 60)
        print("\nPara usar la interfaz gr√°fica, ejecuta: python main.py")
        
    except KeyboardInterrupt:
        print("\n\n‚ùå Ejecuci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error durante la ejecuci√≥n: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 